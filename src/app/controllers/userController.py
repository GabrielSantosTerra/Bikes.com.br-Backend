from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from jose import jwt
from app.models.userModel import User
from app.config.database import SessionLocal
from datetime import datetime, timedelta
import os

# Configura칞칚o do JWT
SECRET_KEY = os.getenv("JWT_SECRET", "minha_chave_secreta")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Cria칞칚o do roteador
router = APIRouter()

# Configura칞칚o do bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Fun칞칚o para obter a sess칚o do banco de dados
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# 游댌 Listar todos os usu치rios
@router.get("/")
async def get_all_users(db: Session = Depends(get_db)):
    try:
        users = db.query(User).all()
        return users
    except Exception as error:
        raise HTTPException(status_code=500, detail=f"Erro ao buscar usu치rios: {error}")

# 游닌 Registrar novo usu치rio
@router.post("/register")
async def register_user(user_data: dict, db: Session = Depends(get_db)):
    try:
        name = user_data.get("name")
        email = user_data.get("email")
        password = user_data.get("password")
        cpf = user_data.get("cpf")
        birth_date = user_data.get("birth_date")
        phone = user_data.get("phone")

        if not all([name, email, password, cpf, birth_date, phone]):
            raise HTTPException(status_code=400, detail="Todos os campos s칚o obrigat칩rios!")

        # Verificar se o e-mail ou CPF j치 existe
        if db.query(User).filter(User.email == email).first():
            raise HTTPException(status_code=400, detail="E-mail j치 cadastrado!")
        
        if db.query(User).filter(User.cpf == cpf).first():
            raise HTTPException(status_code=400, detail="CPF j치 cadastrado!")

        # Criptografar a senha
        hashed_password = pwd_context.hash(password)

        # Criar novo usu치rio
        new_user = User(
            name=name,
            email=email,
            password_hash=hashed_password,
            cpf=cpf,
            birth_date=birth_date,
            phone=phone,
        )
        db.add(new_user)
        db.commit()
        db.refresh(new_user)

        return {"message": "Usu치rio criado com sucesso!", "user": {"name": new_user.name, "email": new_user.email}}

    except Exception as error:
        raise HTTPException(status_code=500, detail=f"Erro ao criar usu치rio: {error}")

# 游댐 Login do usu치rio
@router.post("/login")
async def login_user(credentials: dict, db: Session = Depends(get_db)):
    try:
        email = credentials.get("email")
        password = credentials.get("password")

        if not email or not password:
            raise HTTPException(status_code=400, detail="Os campos email e senha s칚o obrigat칩rios!")

        user = db.query(User).filter(User.email == email).first()
        if not user:
            raise HTTPException(status_code=404, detail="Usu치rio n칚o encontrado!")

        if not pwd_context.verify(password, user.password_hash):
            raise HTTPException(status_code=401, detail="Credenciais inv치lidas!")

        # Gera칞칚o do token JWT
        token_data = {
            "sub": user.email,
            "exp": datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES),
        }
        token = jwt.encode(token_data, SECRET_KEY, algorithm=ALGORITHM)

        return {
            "message": "Login bem-sucedido!",
            "token": token,
            "user": {"name": user.name, "email": user.email},
        }

    except Exception as error:
        raise HTTPException(status_code=500, detail=f"Erro ao realizar login: {error}")
